#include<bits/stdc++.h>
using namespace std;
class Node{
	public:
		int val;
		Node* next;
		Node(int val){
//			val=data;
//			next=NULL;
          this->val=val;
          this->next=NULL;
		}
};
void display(Node* head){
	Node* temp=head;
	while(temp!=NULL){
		cout<<temp->val<<"->";
		temp=temp->next;
	}
	cout<<"NULL"<<endl;
}
void displayrecursively(Node* head){
	if(head==NULL)
	return;
	displayrecursively(head->next);
	cout<<head->val<<" ";
	displayrecursively(head->next);
}
void displayreverse(Node* head){
	if(head==NULL){
		return;
	}
	displayreverse(head->next);
	cout<<head->val<<" ";
	
} 
int count(Node* head){
	Node* temp=head;
	int c=0;
	while(temp!=NULL){
		c++;
		temp=temp->next;
	}
	return c;
	
}
void insertAtEnd(Node* head,int val){
	Node* t=new Node(val);
	while(head->next!=NULL) head=head->next;
	head->next=t;
}
int main(){
	Node* head=new Node(10);
	Node* b=new Node(20);
	Node* c=new Node(30);
	Node* d=new Node(40);
	Node* e=new Node(50);
	head->next=b;
	b->next=c;
	c->next=d;
	d->next=e;
	display(head);
	displayrecursively(head);
	cout<<endl;
	displayreverse(head);
	cout<<endl;
    cout<<count(head);
    insertAtEnd(a,80);
	display(head);
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


#include<bits/stdc++.h>
using namespace std;
//userdefined data type
class Node{
	public:
		int val;
		Node* next;
		Node(int val){
          this->val=val;
          this->next=NULL;
		}
};
//userdefined data structure
class LinkedList{
	public:
	Node* head;
	Node* tail;
	int size;
	LinkedList(){
		head=tail=NULL;
		size=0;
	}
	void insertAtEnd(int val){
		Node* temp=new Node(val);
		if(size==0) head=tail=temp;
		else{
			tail->next=temp;
			tail=temp;
		}
		size++;
	}
	void insertAthead(int val){
		Node* temp=new Node(val);
		if(size==0) head=tail=temp;
		else{
			temp->next=head;
			head=temp;
		}
		size++;
	}
	void insertAtindex(int idx,int val){
		if(idx<0 || idx>size ){
			cout<<"Invalid "<<endl;
//			return;
		}
		else if(idx==0){
			insertAthead(val);
//			return;
		}
		else if(idx==size){
			insertAtEnd(val);
//			return;
		}
		else{
			Node* t=new Node(val);
			Node* temp=head;
			for(int i=0;i<=idx-1;i++){
				temp=temp->next;
			}
			t->next=temp->next;
			temp->next=t;
			size++;
			
		}
	}
	int getAtIdx(int idx){
		if(idx<0 || idx>=size) {
			cout<<"Invalid Index";
			return -1;
		}
		else if(idx==0){
			return head->val;
		}
		else if(idx==(size-1)){
			return tail->val;
		}
		else{
			Node* temp=head;
			for(int i=0;i<=idx;i++){
				temp=temp->next;
			}
			return temp->val;
		}
	}
	void DeleteAthead(){
		if(size==0) {
		
		cout<<"Empty"<<endl;
		return;
	}
		head=head->next;
		size--;
	}
	void DeleteAttail(){
	if(size==0) {
		
		cout<<"Empty"<<endl;
		return;
	}
	Node* temp=head;
	while(temp->next!=tail){
		temp=temp->next;
	}
	temp->next=NULL;
	tail=temp;
	size--;
	}
	void deleteAtAnyIdx(int idx){
		if(size==0) {
		
		cout<<"Empty"<<endl;
		return;
	}
		else if(idx<0 || idx>=size){
			cout<<"invalid";
			return;
		}
		else if(idx==0) return DeleteAthead();
		else if(idx==size-1) return DeleteAttail();
		else{
			Node* temp=head;
			for(int i=0;i<=idx-1;i++){
				temp=temp->next;
			}
			temp->next=temp->next->next;
			size--;
			
		}
	}
	void display(){
		Node* temp=head;
		while(temp!=NULL){
			cout<<temp->val<<" ";
			temp=temp->next;
		}
		cout<<endl;
	}
	
	
};
int main(){
	LinkedList ll;
	ll.insertAtEnd(10);
	ll.insertAtEnd(20);
	ll.insertAtEnd(30);
	ll.insertAtEnd(40);
	ll.display();
	ll.insertAthead(79);
	ll.insertAthead(90);
	ll.display();
	ll.insertAtindex(3,987);
	ll.display();
	cout<<ll.getAtIdx(3)<<endl;
	ll.DeleteAthead();
	ll.display();
	ll.DeleteAttail();
	ll.display();
	ll.deleteAtAnyIdx(3);
	ll.display();
	
	
	
}





