//part 2

//#include<bits/stdc++.h>
//using namespace std;
//bool balanced(string s){
//	if(s.length()%2!=0) return false;
//	stack<int> ans;
//	for(int i=0;i<s.size();i++){
//		if(s[i]=='(') ans.push(s[i]);
//		else{
//			if(ans.size()==0) return false;
//		    else ans.pop();
//	}
//	}
//	if(ans.size()==0) return true;
//	else return false;
//}
//int main(){
//	string s="())()(";
//	
//	cout<<balanced(s);
//}

//Do the given HW

//2
//Remove consecutive duplicate in a string?

//#include<bits/stdc++.h>
//using namespace std;
//string removedupplicate(string a){
//	stack<char> ans;
//	string st="";
//	for(int i=0;i<a.size();i++){
//		if(ans.size()==0) ans.push(a[i]);
//		else{
//		
//		if(ans.top()!=a[i]) ans.push(a[i]);
//		
//	}
//	}
//	while(!ans.empty()){
//		st+=ans.top();
//		ans.pop();
//	}
//	reverse(st.begin(),st.end());
//	return st;
//}
//
//int main(){
//	string s="aaabbcddaabffg";
//	cout<<removedupplicate(s);
//	
//}


//3. Next Greater element 
//Brute force

//#include<bits/stdc++.h>
//using namespace std;
//int main(){
//	int n;
//	cin>>n;
//	int arr[n];
//	for(int i=0;i<n;i++){
//		cin>>arr[i];
//	}
//	int nge[n];
//	for(int i=0;i<n;i++){
//		nge[i]=-1;
//		for(int j=i+1;j<n;j++){
//			if(arr[j]>arr[i]){
//				nge[i]=arr[j];
//				break;
//			}
//		}
//	}
//	for(int i=0;i<n;i++){
//		cout<<nge[i]<<" ";
//	}
//}

//Method - II : pop,ans,push
//T.C:- O(2n)
//S.C:- O(n)

#include<bits/stdc++.h>
using namespace std;
int main(){
	int n;
	cin>>n;
	int arr[n];
	for(int i=0;i<n;i++){
		cin>>arr[i];
	}
	int nge[n];
	nge[n-1]=-1;
	stack<int> ans;
	ans.push(arr[n-1]);
	
	for(int i=n-2;i>=0;i--){
		while(ans.size()>0 && ans.top()<=arr[i]) ans.pop(); //pop
		if(ans.size()==0) nge[i]=-1; //mark ans
		else nge[i]=ans.top();
		ans.push(arr[i]); // push
	}
	for(int i=0;i<n;i++){
		cout<<nge[i]<<" ";
	}
}

//Previous Graeter element

//#include<bits/stdc++.h>
//using namespace std;
//int main(){ 
//	int n;
//	cin>>n;
//	int arr[n];
//	for(int i=0;i<n;i++){
//		cin>>arr[i];
//	}
//	int pge[n];
//	pge[0]=-1;
//	stack<int> ans;
//	ans.push(arr[0]);     
//	
//	for(int i=1;i<n;i++){
//		while(ans.size()>0 && ans.top()<=arr[i]) ans.pop(); //pop
//		if(ans.size()==0) pge[i]=-1; //mark ans
//		else pge[i]=ans.top();
//		ans.push(arr[i]); // push
//	}
//	
//	for(int i=0;i<n;i++){
//		cout<<pge[i]<<" ";
//	}
//}


//STOCK SPAN PROBLEM:

//#include<bits/stdc++.h>
//using namespace std;
//int main(){ 
//	int n;
//	cin>>n;
//	int arr[n];
//	for(int i=0;i<n;i++){
//		cin>>arr[i];
//	}
//	int pgi[n];
//	pgi[0]=-1;
//	stack<int> ans;
//	ans.push(0);     
//	
//	for(int i=1;i<n;i++){
//		while(ans.size()>0 && arr[ans.top()]<=arr[i]) ans.pop(); //pop
//		if(ans.size()==0) pgi[i]=-1; //mark ans
//		else pgi[i]=ans.top();
//		ans.push(i); // push
//	}
//	for(int i=0;i<n;i++){
//		pgi[i]=i-pgi[i];
//	}
//	
//	for(int i=0;i<n;i++){
//		cout<<pgi[i]<<" ";
//	}
//}



